#lang typed/racket/base/no-check
(require racket/contract (lib "racket/contract.rkt") (lib "racket/base.rkt"))
(define g5 string?)
(define generated-contract4 (-> g5 (values g5)))
(module require/contracts racket/base (require racket/contract) (provide))
(require (prefix-in -: (only-in 'require/contracts))
          (except-in 'require/contracts))
(define-values () (values))
(void)
(require require-typed-check)
(require "morse-code-table.rkt")
(: char->dit-dah-string (-> Char String))
(define (char->dit-dah-string letter)
   (define res (hash-ref char-table (char-downcase letter) #f))
   (if (eq? #f res)
     (raise-argument-error 'letter-map "character in map" 0 letter)
     res))
(: string->morse (-> String String))
(define (string->morse str)
   (define morse-list
     (for/list : (Listof String) ((c : Char str)) (char->dit-dah-string c)))
   (apply string-append morse-list))
(provide)
(provide (contract-out (string->morse generated-contract4)))
