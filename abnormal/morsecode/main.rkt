#lang typed/racket/base/no-check
(require racket/contract)
(module require/contracts racket/base
   (require racket/contract
            (lib "racket/contract/base.rkt")
            (lib "racket/base.rkt"))
   (define g5 string?)
   (define g6 exact-integer?)
   (define g7 (or/c g6))
   (define g8 '())
   (define g9 (cons/c g7 g8))
   (define g10 (cons/c g5 g9))
   (define g11 (listof g10))
   (define l/1 g11)
   (provide g8 g9 g10 g11 l/1 g5 g6 g7))
(require (prefix-in -: (only-in 'require/contracts))
          (except-in 'require/contracts))
(define-values () (values))
(require require-typed-check (only-in racket/file file->value))
(require "morse-code-strings.rkt")
(require "levenshtein.rkt")
(define word-frequency-list "./../base/frequency.rktd")
(define word-frequency-list-small "./../base/frequency-small.rktd")
(define freq-list? l/1)
(: file->words (-> String (Listof String)))
(define (file->words filename)
   (define words+freqs (file->value (string->path filename)))
   (unless (freq-list? words+freqs) (error "expected a frequency list"))
   (for/list
    :
    (Listof String)
    ((word+freq : (List String Integer) words+freqs))
    (car word+freq)))
(: allwords (Listof String))
(define allwords (file->words word-frequency-list))
(: words-small (Listof String))
(define words-small (file->words word-frequency-list-small))
(: main (-> (Listof String) Void))
(define (main words)
   (for*
    ((w1 (in-list words)) (w2 (in-list words)))
    (string->morse w1)
    (string->morse w2)
    (string-levenshtein w1 w2)
    (string-levenshtein w2 w1)
    (void)))
(time (main words-small))
(provide)
