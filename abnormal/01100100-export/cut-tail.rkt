#lang typed/racket/no-check
(require racket/contract
          (lib "racket/contract.rkt")
          (lib "racket/base.rkt")
          (lib "racket/contract/base.rkt")
          (submod "data-adaptor.rkt" #%type-decl ".."))
(define g4 (lambda (x) (posn? x)))
(define g5 (listof g4))
(define g6 (cons/c g4 g5))
(define generated-contract3 (-> g6 (values g5)))
(provide (contract-out (cut-tail any/c)))
(module require/contracts racket/base
   (require racket/contract)
   (provide (contract-out)))
(require (prefix-in -: (only-in 'require/contracts))
          (except-in 'require/contracts))
(define-values () (values))
(require "data-adaptor.rkt")
(: cut-tail : (-> (NEListof Posn) (Listof Posn)))
(define (cut-tail segs)
   (let ((r (cdr segs)))
     (cond ((empty? r) empty) (else (cons (car segs) (cut-tail r))))))
(provide)
