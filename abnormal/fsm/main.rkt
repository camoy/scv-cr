#lang typed/racket/no-check
(require racket/contract)
(module require/contracts racket/base
   (require racket/contract
            (lib "racket/contract/base.rkt")
            (lib "racket/base.rkt")
            (submod (lib "typed-racket/private/type-contract.rkt") predicates))
   (define g3 nonnegative?)
   (define g4 (or/c g3))
   (define g5 real?)
   (define g6 (or/c g5))
   (define l/34 g4)
   (define l/35 g6)
   (provide g3 g4 l/34 g5 g6 l/35))
(require (prefix-in -: (only-in 'require/contracts))
          (except-in 'require/contracts))
(define-values () (values))
(random-seed 7480)
(require require-typed-check "automata-adapted.rkt")
(require "population.rkt")
(require "utilities.rkt")
(define (main)
   (simulation->lines (evolve (build-random-population 300) 500 100 20))
   (void))
(: simulation->lines (-> (Listof Payoff) (Listof (List Integer Real))))
(define (simulation->lines data)
   (for/list
    :
    (Listof (List Integer Real))
    ((d : Payoff (in-list data)) (n : Integer (in-naturals)))
    (list n d)))
(: evolve (-> Population Natural Natural Natural (Listof Payoff)))
(define (evolve p c s r)
   (cond
    ((zero? c) '())
    (else
     (define p2 (match-up* p r))
     (define pp (population-payoffs p2))
     (define p3 (death-birth p2 s))
     ((inst cons Payoff (Listof Payoff))
      (cast (relative-average pp r) Payoff)
      (evolve p3 (- c 1) s r)))))
(time (main))
(provide)
