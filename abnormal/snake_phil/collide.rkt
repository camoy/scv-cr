#lang typed/racket/no-check
(require racket/contract
          (lib "racket/contract.rkt")
          (lib "racket/base.rkt")
          (lib "racket/contract/base.rkt")
          (submod "data.rkt" #%type-decl ".."))
(define g9 (lambda (x) (snake? x)))
(define g10 '#t)
(define g11 '#f)
(define g12 (or/c g10 g11))
(define generated-contract5 (-> g9 (values g12)))
(define generated-contract6 (-> g9 (values g12)))
(provide (contract-out
           (snake-self-collide? generated-contract5)
           (snake-wall-collide? generated-contract6)))
(module require/contracts racket/base
   (require racket/contract
            "const.rkt"
            (lib "racket/contract/base.rkt")
            (lib "racket/base.rkt"))
   (define g7 exact-integer?)
   (define g8 (or/c g7))
   (define l/1 g8)
   (define l/3 g8)
   (provide g7 g8 l/1 l/3 (contract-out (BOARD-HEIGHT l/3) (BOARD-WIDTH l/1))))
(require (prefix-in -: (only-in 'require/contracts BOARD-WIDTH BOARD-HEIGHT))
          (except-in 'require/contracts BOARD-WIDTH BOARD-HEIGHT))
(define-values
  (BOARD-WIDTH BOARD-HEIGHT)
  (values -:BOARD-WIDTH -:BOARD-HEIGHT))
(require require-typed-check "data-adaptor.rkt")
(void)
(require "data.rkt")
(: snake-wall-collide? : (-> Snake Boolean))
(define (snake-wall-collide? snk) (head-collide? (car (snake-segs snk))))
(: head-collide? : (-> Posn Boolean))
(define (head-collide? p)
   (or (<= (posn-x p) 0)
       (>= (posn-x p) BOARD-WIDTH)
       (<= (posn-y p) 0)
       (>= (posn-y p) BOARD-HEIGHT)))
(: snake-self-collide? : (-> Snake Boolean))
(define (snake-self-collide? snk)
   (segs-self-collide? (car (snake-segs snk)) (cdr (snake-segs snk))))
(: segs-self-collide? : (-> Posn (Listof Posn) Boolean))
(define (segs-self-collide? h segs)
   (cond
    ((empty? segs) #f)
    (else (or (posn=? (car segs) h) (segs-self-collide? h (cdr segs))))))
(provide)
