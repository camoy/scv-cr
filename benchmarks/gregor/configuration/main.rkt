(module main typed/racket/base/no-check
   (#%module-begin
    (require soft-contract/fake-contract)
    (module require/contracts racket/base
      (require soft-contract/fake-contract)
      (provide))
    (require (prefix-in -: (only-in 'require/contracts))
             (except-in 'require/contracts))
    (define-values () (values))
    (require require-typed-check
             "../base/types.rkt"
             "gregor-adapter.rkt"
             "tzinfo-adapter.rkt")
    (begin (require "date.rkt") (void))
    (begin (require "time.rkt") (void))
    (begin (require "datetime.rkt") (void))
    (begin (require "moment.rkt") (void))
    (begin (require "clock.rkt") (void))
    (begin (require "difference.rkt") (void))
    (: HISTORIC-DATES (-> (Listof DateTime)))
    (define (HISTORIC-DATES)
      (list
       (datetime 2001 9 11 8 46)
       (datetime 2001 9 11 9 3)
       (datetime 1944 6 6 6 6 6 6)
       (datetime 1984)
       (datetime 1963 11 22 12 30)
       (datetime 1865 4 14 10)
       (datetime 1881 7 2)
       (datetime 1901 9 6)
       (datetime 1933 2 15)
       (datetime 1912 10 14)
       (datetime 1928 11 19)
       (datetime 1950 11 1)
       (datetime 1835 1 30)
       (datetime 1989 11 9)
       (datetime 1969 7 20 20 18)
       (datetime 1977 8 16)
       (datetime 1980 12 8)
       (datetime 2013 6 18)
       (datetime 1998 9 28)
       (datetime 1991 4 29)
       (datetime 1922 2 2)
       (datetime 12)
       (datetime 1030)
       (datetime 1898 4)
       (datetime 1099 7 10)))
    (: RANDOM-DATES (-> (Listof DateTime)))
    (define (RANDOM-DATES)
      (list
       (datetime 324 2 1 4 32 66 23)
       (datetime 6 9 12 0 55 6 8)
       (datetime 1111 12 30 8 48 11 44)
       (datetime 32 5 8 12 2 41 39)
       (datetime 6 6 6 6 6 6 6)
       (datetime 8 6 7 5 3 0 9)
       (datetime 1251 3 18 6)
       (datetime 1386 2 1 0)
       (datetime 123 4 5 12 53)
       (datetime 2002 11 42 32)
       (datetime 777 7 77 77 77)
       (datetime 1 2 3 4 5 6 7)
       (datetime 9999 12 30 30 30 30 30)))
    (: test-clock (-> Void))
    (define (test-clock)
      (define old-clock (unbox current-clock))
      (set-box! current-clock (lambda () 1))
      (unless (date=? (today/utc) (date 1970)) (error "test1"))
      (unless (date=? (today "America/Chicago") (date 1969 12 31))
        (error "test2"))
      (unless (time=? (current-time/utc) (make-time 0 0 1)) (error "test 3"))
      (unless (time=? (current-time "America/Chicago") (make-time 18 0 1))
        (error "test4"))
      (unless (datetime=? (now/utc) (datetime 1970 1 1 0 0 1)) (error "test5"))
      (unless (datetime=? (now "America/Chicago") (datetime 1969 12 31 18 0 1))
        (error "test6"))
      (unless (moment=? (now/moment/utc) (moment 1970 1 1 0 0 1 0 UTC))
        (error "test7"))
      (set-box! current-clock old-clock))
    (: test-iso (-> (Listof DateTime) Void))
    (define (test-iso dates)
      (define old-timezone (unbox current-timezone))
      (define old-clock (unbox current-clock))
      (set-box! current-timezone "America/New_York")
      (set-box! current-clock (lambda () 1463207954418177/1024000))
      (let ((d (today)))
        (unless (string=? "2015-04-13" (date->iso8601 d)) (error "test9")))
      (let ((t (current-time)))
        (unless (string=? "04:33:37.986500977" (time->iso8601 t))
          (error "test10")))
      (let ((n (now)))
        (unless (string=?
                 "2015-04-13T04:33:37.986500977"
                 (datetime->iso8601 n))
          (error "test11")))
      (let ((n (now/moment)))
        (unless (string=?
                 "2015-04-13T04:33:37.986500977-04:00[America/New_York]"
                 (moment->iso8601/tzid n))
          (error "test12")))
      (set-box! current-timezone old-timezone)
      (set-box! current-clock old-clock)
      (for
       ((d1 dates))
       (datetime->iso8601 d1)
       (time->iso8601 (datetime->time d1))
       (date->iso8601 (datetime->date d1))))
    (: test-difference (-> (Listof DateTime) Void))
    (define (test-difference dates)
      (for*
       ((dt1 dates) (dt2 dates))
       (datetime<=? dt1 dt2)
       (datetime-months-between dt1 dt2)
       (datetime-days-between dt1 dt2)
       (datetime-nanoseconds-between dt1 dt2)
       (moment=?
        (posix->moment (datetime->posix dt1) UTC)
        (posix->moment (datetime->posix dt2) UTC))))
    (: main (-> Natural Boolean Void))
    (define (main N large?)
      (define dates
        (if large? (append (HISTORIC-DATES) (RANDOM-DATES)) (HISTORIC-DATES)))
      (for
       ((i (in-range N)))
       (test-clock)
       (test-iso dates)
       (test-difference dates)))
    (time (main 10 #t))
    (provide)))
