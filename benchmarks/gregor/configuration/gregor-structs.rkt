(module gregor-structs typed/racket/base/no-check
   (#%module-begin
    (require soft-contract/fake-contract
             (lib "racket/base.rkt")
             (submod "core-structs.rkt" #%type-decl "..")
             (lib "racket/contract.rkt")
             (lib "racket/contract/base.rkt")
             (lib "typed-racket/types/numeric-predicates.rkt"))
    (define g37 (lambda (x) (YMD? x)))
    (define g38 exact-integer?)
    (define g39 (or/c g38))
    (define g40 (lambda (x) (Date? x)))
    (define g41 struct-type?)
    (define g42 (Î» (_) #f))
    (define g43 any/c)
    (define g44 '#t)
    (define g45 '#f)
    (define g46 (or/c g44 g45))
    (define g47 (-> g43 (values g46)))
    (define g48 (or/c g42 g47))
    (define g49 (lambda (x) (Time? x)))
    (define g50 t:exact-rational?)
    (define g51 (or/c g50))
    (define g52 (lambda (x) (DateTime? x)))
    (define g53 string?)
    (define g54 (or/c g53 g45))
    (define g55 (lambda (x) (Moment? x)))
    (define g56 (lambda (x) (HMSN? x)))
    (define g57 exact-nonnegative-integer?)
    (define g58 (or/c g57))
    (define generated-contract11 g41)
    (define generated-contract12 g48)
    (define generated-contract13 (-> g40 (values g39)))
    (define generated-contract14 (-> g40 (values g37)))
    (define generated-contract16 (-> g37 g39 (values g40)))
    (define generated-contract17 g41)
    (define generated-contract18 g48)
    (define generated-contract19 (-> g52 (values g51)))
    (define generated-contract20 (-> g52 (values g49)))
    (define generated-contract21 (-> g52 (values g40)))
    (define generated-contract23 (-> g40 g49 g51 (values g52)))
    (define generated-contract24 g41)
    (define generated-contract25 g48)
    (define generated-contract26 (-> g55 (values g54)))
    (define generated-contract27 (-> g55 (values g39)))
    (define generated-contract28 (-> g55 (values g52)))
    (define generated-contract30 (-> g52 g39 g54 (values g55)))
    (define generated-contract31 g41)
    (define generated-contract32 g48)
    (define generated-contract33 (-> g49 (values g58)))
    (define generated-contract34 (-> g49 (values g56)))
    (define generated-contract36 (-> g56 g58 (values g49)))
    (module require/contracts racket/base
      (require soft-contract/fake-contract)
      (provide))
    (require (prefix-in -: (only-in 'require/contracts))
             (except-in 'require/contracts))
    (define-values () (values))
    (require "core-adapter.rkt")
    (void)
    (struct Date ((ymd : YMD) (jdn : Integer)))
    (struct Time ((hmsn : HMSN) (ns : Natural)))
    (struct DateTime ((date : Date) (time : Time) (jd : Exact-Rational)))
    (struct
     Moment
     ((datetime/local : DateTime)
      (utc-offset : Integer)
      (zone : (U String #f))))
    (provide)
    (provide (contract-out (struct Date ((ymd g37) (jdn g39))))
             (contract-out (struct Time ((hmsn g56) (ns g58))))
             (contract-out (struct DateTime ((date g40) (time g49) (jd g51))))
             (contract-out
              (struct
               Moment
               ((datetime/local g52) (utc-offset g39) (zone g54)))))))
