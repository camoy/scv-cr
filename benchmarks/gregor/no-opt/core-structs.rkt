(module core-structs typed/racket/base/no-check
   (#%module-begin
    (require soft-contract/fake-contract
             (lib "racket/base.rkt")
             (lib "racket/contract/base.rkt")
             (lib "racket/contract.rkt"))
    (define g22 exact-integer?)
    (define g23 (or/c g22))
    (define g24 (lambda (x) (HMSN? x)))
    (define g25 struct-type?)
    (define g26 (Î» (_) #f))
    (define g27 any/c)
    (define g28 '#t)
    (define g29 '#f)
    (define g30 (or/c g28 g29))
    (define g31 (-> g27 (values g30)))
    (define g32 (or/c g26 g31))
    (define g33 exact-nonnegative-integer?)
    (define g34 (or/c g33))
    (define g35 (lambda (x) (equal? x '1)))
    (define g36 (lambda (x) (equal? x '2)))
    (define g37 (lambda (x) (equal? x '3)))
    (define g38 (lambda (x) (equal? x '4)))
    (define g39 (lambda (x) (equal? x '5)))
    (define g40 (lambda (x) (equal? x '6)))
    (define g41 (lambda (x) (equal? x '7)))
    (define g42 (lambda (x) (equal? x '8)))
    (define g43 (lambda (x) (equal? x '9)))
    (define g44 (lambda (x) (equal? x '10)))
    (define g45 (lambda (x) (equal? x '11)))
    (define g46 (lambda (x) (equal? x '12)))
    (define g47 (or/c g35 g36 g37 g38 g39 g40 g41 g42 g43 g44 g45 g46))
    (define g48 (lambda (x) (YMD? x)))
    (define generated-contract7 g25)
    (define generated-contract8 g32)
    (define generated-contract9 (-> g24 (values g23)))
    (define generated-contract10 (-> g24 (values g23)))
    (define generated-contract11 (-> g24 (values g23)))
    (define generated-contract12 (-> g24 (values g23)))
    (define generated-contract14 (-> g23 g23 g23 g23 (values g24)))
    (define generated-contract15 g25)
    (define generated-contract16 g32)
    (define generated-contract17 (-> g48 (values g34)))
    (define generated-contract18 (-> g48 (values g47)))
    (define generated-contract19 (-> g48 (values g34)))
    (define generated-contract21 (-> g34 g47 g34 (values g48)))
    (module require/contracts racket/base
      (require soft-contract/fake-contract)
      (provide))
    (require (prefix-in -: (only-in 'require/contracts))
             (except-in 'require/contracts))
    (define-values () (values))
    (void)
    (require "../base/types.rkt")
    (struct YMD ((y : Natural) (m : Month) (d : Natural)) #:transparent)
    (struct
     HMSN
     ((h : Integer) (m : Integer) (s : Integer) (n : Integer))
     #:transparent)
    (provide)
    (provide (contract-out (struct YMD ((y g34) (m g47) (d g34))))
             (contract-out (struct HMSN ((h g23) (m g23) (s g23) (n g23)))))))
