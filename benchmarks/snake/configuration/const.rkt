(module const typed/racket/no-check
   (#%module-begin
    (require racket/contract
             (lib "racket/base.rkt")
             (submod "data-adaptor.rkt" #%type-decl "..")
             (lib "racket/contract.rkt")
             (lib "racket/contract/base.rkt")
             (lib "typed-racket/types/numeric-predicates.rkt"))
    (define g8 (and/c byte? positive?))
    (define g9 (or/c g8))
    (define g10 (and/c index? positive?))
    (define g11 (or/c g10))
    (define g12 (lambda (x) (world? x)))
    (define generated-contract3 g9)
    (define generated-contract4 (-> (values g11)))
    (define generated-contract5 g9)
    (define generated-contract6 g9)
    (define generated-contract7 (-> (values g12)))
    (module require/contracts racket/base (require racket/contract) (provide))
    (require (prefix-in -: (only-in 'require/contracts))
             (except-in 'require/contracts))
    (define-values () (values))
    (require "data-adaptor.rkt")
    (define GRID-SIZE 30)
    (define BOARD-HEIGHT 20)
    (define BOARD-WIDTH 30)
    (define (BOARD-HEIGHT-PIXELS) (* GRID-SIZE BOARD-HEIGHT))
    (define (BOARD-WIDTH-PIXELS) (* GRID-SIZE BOARD-WIDTH))
    (define (SEGMENT-RADIUS) (/ GRID-SIZE 2))
    (define (FOOD-RADIUS) (SEGMENT-RADIUS))
    (define (WORLD)
      (world (snake "right" (cons (posn 5 3) empty)) (posn 8 12)))
    (void)
    (provide)
    (provide (contract-out (BOARD-HEIGHT-PIXELS generated-contract4))
             (contract-out (BOARD-WIDTH generated-contract5))
             (contract-out (GRID-SIZE generated-contract6))
             (contract-out (BOARD-HEIGHT generated-contract3))
             (contract-out (WORLD generated-contract7)))))
