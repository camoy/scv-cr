(module image typed/racket/base/no-check
   (#%module-begin
    (require soft-contract/fake-contract
             (lib "racket/base.rkt")
             (lib "racket/contract/base.rkt")
             (lib "racket/contract.rkt"))
    (define g13 real?)
    (define g14 (or/c g13))
    (define g15 string?)
    (define g16 (lambda (x) (image? x)))
    (define g17 any/c)
    (define g18 struct-type?)
    (define g19 (Î» (_) #f))
    (define g20 '#t)
    (define g21 '#f)
    (define g22 (or/c g20 g21))
    (define g23 (-> g17 (values g22)))
    (define g24 (or/c g19 g23))
    (define g25 any/c)
    (define generated-contract5 (-> g14 g15 g15 (values g16)))
    (define generated-contract6 (-> g14 g14 (values g16)))
    (define generated-contract7 g18)
    (define generated-contract8 g24)
    (define generated-contract9 (-> g16 (values g25)))
    (define generated-contract11 (-> g17 (values g16)))
    (define generated-contract12 (-> g16 g14 g14 g16 (values g16)))
    (module require/contracts racket/base
      (require soft-contract/fake-contract)
      (provide))
    (require (prefix-in -: (only-in 'require/contracts))
             (except-in 'require/contracts))
    (define-values () (values))
    (void)
    (struct image ((impl : Any)))
    (define-type Image image)
    (: empty-scene (-> Real Real Image))
    (define (empty-scene w h)
      (when (or (negative? w) (negative? h))
        (error 'image "Arguments must be non-negative real numbers"))
      (image (cons w h)))
    (: place-image (-> Image Real Real Image Image))
    (define (place-image i1 w h i2) (image (list i1 w h i2)))
    (: circle (-> Real String String Image))
    (define (circle radius style color) (image (list radius style color)))
    (provide)
    (provide (contract-out (circle generated-contract5))
             (contract-out (place-image generated-contract12))
             (contract-out (empty-scene generated-contract6))
             (contract-out (struct image ((impl g17)))))))
