(module aux typed/racket/no-check
   (#%module-begin
    (require racket/contract
             (lib "racket/contract/base.rkt")
             (lib "racket/base.rkt")
             (lib "racket/contract.rkt")
             (submod "base-types.rkt" #%type-decl ".."))
    (define g11 (lambda (x) (tetra? x)))
    (define g12 (listof g11))
    (define g13 (and/c fixnum? negative?))
    (define g14 '())
    (define g15 (cons/c g11 g14))
    (define g16 (cons/c g11 g15))
    (define g17 (cons/c g11 g16))
    (define g18 (cons/c g11 g17))
    (define g19 (cons/c g11 g18))
    (define g20 (cons/c g11 g19))
    (define g21 (cons/c g11 g20))
    (define generated-contract4 (-> g12 (values g11)))
    (define generated-contract5 g13)
    (define generated-contract6 g21)
    (module require/contracts racket/base
      (require racket/contract
               "tetras.rkt"
               (lib "racket/contract.rkt")
               (lib "racket/base.rkt")
               (submod "base-types.rkt" #%type-decl "..")
               (lib "racket/contract/base.rkt"))
      (define g7 symbol?)
      (define g8 real?)
      (define g9 (or/c g8))
      (define g10 (lambda (x) (tetra? x)))
      (define l/1 (-> g7 g9 g9 g9 g9 g9 g9 g9 g9 g9 g9 (values g10)))
      (provide g7 g8 g9 g10 l/1 (contract-out (build-tetra-blocks l/1))))
    (require (prefix-in -: (only-in 'require/contracts build-tetra-blocks))
             (except-in 'require/contracts build-tetra-blocks))
    (define-values (build-tetra-blocks) (values -:build-tetra-blocks))
    (require "base-types.rkt")
    (require require-typed-check)
    (void)
    (void)
    (random-seed 43453)
    (: list-pick-random (-> (Listof Tetra) Tetra))
    (define (list-pick-random ls) (list-ref ls (random (length ls))))
    (define neg-1 -1)
    (define tetras
      (list
       (build-tetra-blocks 'green 1/2 -3/2 0 -1 0 -2 1 -1 1 -2)
       (build-tetra-blocks 'blue 1 -1 0 -1 1 -1 2 -1 3 -1)
       (build-tetra-blocks 'purple 1 -1 0 -1 1 -1 2 -1 2 -2)
       (build-tetra-blocks 'cyan 1 -1 0 -1 1 -1 2 -1 0 -2)
       (build-tetra-blocks 'orange 1 -1 0 -1 1 -1 2 -1 1 -2)
       (build-tetra-blocks 'red 1 -1 0 -1 1 -1 1 -2 2 -2)
       (build-tetra-blocks 'pink 1 -1 0 -2 1 -2 1 -1 2 -1)))
    (provide)
    (provide (contract-out (tetras generated-contract6))
             (contract-out (neg-1 generated-contract5))
             (contract-out (list-pick-random generated-contract4)))))
