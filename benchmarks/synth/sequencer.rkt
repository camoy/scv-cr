(module sequencer typed/racket/base/no-check
   (#%module-begin
    (require racket/contract
             (lib "racket/contract.rkt")
             (lib "racket/base.rkt")
             (lib "racket/contract/base.rkt")
             (submod "data.rkt" #%type-decl ".."))
    (define g5 symbol?)
    (define g6 exact-nonnegative-integer?)
    (define g7 (or/c g6))
    (define g8 (cons/c g7 g7))
    (define g9 '#f)
    (define g10 (or/c g6 g9))
    (define g11 (cons/c g10 g7))
    (define g12 (listof g11))
    (define g13 flonum?)
    (define g14 (or/c g13))
    (define g15 exact-integer?)
    (define g16 (or/c g15))
    (define g17 (vectorof g16))
    (define g18 (or/c g17))
    (define g19 (-> g18 (values g14)))
    (define g20 (-> g14 (values g19)))
    (define g21 (lambda (x) (Array? x)))
    (define generated-contract3 (-> g5 g7 g7 (values g8)))
    (define generated-contract4 (-> g7 g12 g7 g20 (values g21)))
    (module require/contracts racket/base (require racket/contract) (provide))
    (require (prefix-in -: (only-in 'require/contracts))
             (except-in 'require/contracts))
    (define-values () (values))
    (require require-typed-check "typed-data.rkt")
    (require "array-struct.rkt")
    (require "array-transform.rkt")
    (require "synth.rkt")
    (require "mixer.rkt")
    (void)
    (: note-freq (-> Natural Float))
    (define (note-freq note)
      (: res Real)
      (define res (* 440 (expt (expt 2 1/12) (- note 57))))
      (if (flonum? res) res (error "not real")))
    (: name+octave->note (-> Symbol Natural Natural))
    (define (name+octave->note name octave)
      (+
       (* 12 octave)
       (case name
         ((C) 0)
         ((C# Db) 1)
         ((D) 2)
         ((D# Eb) 3)
         ((E) 4)
         ((F) 5)
         ((F# Gb) 6)
         ((G) 7)
         ((G# Ab) 8)
         ((A) 9)
         ((A# Bb) 10)
         ((B) 11)
         (else 0))))
    (: note (-> Symbol Natural Natural (Pairof Natural Natural)))
    (define (note name octave duration)
      (cons (name+octave->note name octave) duration))
    (:
     synthesize-note
     (-> (U #f Natural) Natural (-> Float (-> Indexes Float)) Array))
    (define (synthesize-note note n-samples function)
      (build-array
       (vector n-samples)
       (if note (function (note-freq note)) (lambda (x) 0.0))))
    (:
     sequence
     (->
      Natural
      (Listof (Pairof (U Natural #f) Natural))
      Natural
      (-> Float (-> Indexes Float))
      Array))
    (define (sequence n pattern tempo function)
      (: samples-per-beat Natural)
      (define samples-per-beat (quotient (* fs 60) tempo))
      (array-append*
       (for*/list:
        :
        (Listof Array)
        ((i (in-range n))
         (note : (Pairof (U Natural #f) Natural) (in-list pattern)))
        (: nsamples Natural)
        (define nsamples (* samples-per-beat (cdr note)))
        (synthesize-note (car note) nsamples function))))
    (provide)
    (provide (contract-out (note generated-contract3))
             (contract-out (sequence generated-contract4)))))
