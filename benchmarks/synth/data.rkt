(module data typed/racket/base/no-check
   (#%module-begin
    (require racket/contract
             (lib "racket/base.rkt")
             (lib "racket/contract/base.rkt")
             (lib "racket/contract.rkt"))
    (define g28 exact-integer?)
    (define g29 (or/c g28))
    (define g30 (vectorof g29))
    (define g31 (or/c g30))
    (define g32 '#t)
    (define g33 '#f)
    (define g34 (or/c g32 g33))
    (define g35 (box/c g34))
    (define g36 (lambda (x) (equal? x (void))))
    (define g37 (-> g36))
    (define g38 flonum?)
    (define g39 (or/c g38))
    (define g40 (-> g31 (values g39)))
    (define g41 (lambda (x) (Array? x)))
    (define g42 struct-type?)
    (define g43 (Î» (_) #f))
    (define g44 any/c)
    (define g45 (-> g44 (values g34)))
    (define g46 (or/c g43 g45))
    (define g47 (-> g31 (values g39)))
    (define g48 (-> (values g36)))
    (define g49 (-> g31 g39 (values g36)))
    (define g50 (vectorof g39))
    (define g51 (or/c g50))
    (define g52 (lambda (x) (Mutable-Array? x)))
    (define g53 (lambda (x) (Settable-Array? x)))
    (define g54 (-> g31 g39 (values g36)))
    (define generated-contract9 g42)
    (define generated-contract10 g46)
    (define generated-contract11 (-> g41 (values g47)))
    (define generated-contract12 (-> g41 (values g48)))
    (define generated-contract13 (-> g41 (values g35)))
    (define generated-contract14 (-> g41 (values g29)))
    (define generated-contract15 (-> g41 (values g31)))
    (define generated-contract17 (-> g31 g29 g35 g37 g40 (values g41)))
    (define generated-contract18 g42)
    (define generated-contract19 g46)
    (define generated-contract20 g42)
    (define generated-contract21 g46)
    (define generated-contract22 (-> g53 (values g54)))
    (define generated-contract24 (-> g31 g29 g35 g37 g40 g49 (values g53)))
    (define generated-contract25 (-> g52 (values g51)))
    (define generated-contract27 (-> g31 g29 g35 g37 g40 g49 g51 (values g52)))
    (module require/contracts racket/base (require racket/contract) (provide))
    (require (prefix-in -: (only-in 'require/contracts))
             (except-in 'require/contracts))
    (define-values () (values))
    (void)
    (struct:
     Array
     ((shape : (Vectorof Integer))
      (size : Integer)
      (strict? : (Boxof Boolean))
      (strict! : (-> Void))
      (unsafe-proc : (-> (Vectorof Integer) Float))))
    (struct:
     Settable-Array
     Array
     ((set-proc : ((Vectorof Integer) Float -> Void))))
    (struct: Mutable-Array Settable-Array ((data : (Vectorof Float))))
    (provide)
    (provide (contract-out
              (struct
               (Mutable-Array Settable-Array)
               ((shape g31)
                (size g29)
                (strict? g35)
                (strict! g37)
                (unsafe-proc g40)
                (set-proc g49)
                (data g51))))
             (contract-out
              (struct
               Array
               ((shape g31)
                (size g29)
                (strict? g35)
                (strict! g37)
                (unsafe-proc g40))))
             (contract-out
              (struct
               (Settable-Array Array)
               ((shape g31)
                (size g29)
                (strict? g35)
                (strict! g37)
                (unsafe-proc g40)
                (set-proc g49)))))))
