#!/usr/bin/env racket
#lang racket/base

(require racket/path
         racket/port
         racket/exn
         racket/file
         racket/function
         racket/string
         racket/tcp
         racket/list
         scv-cr
         scv-cr/private/syntax-util
         gtp-util
         gcstats/core
         basedir)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define port 8182)
(define main
  (vector-ref (current-command-line-arguments) 2))
(define main-dir
  (path-only (path->complete-path (string->path main))))
(define rkt? (curryr path-has-extension? #".rkt"))
(define targets
  (filter rkt? (directory-list main-dir #:build? main-dir)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (targets->name targets benchmark)
  (define bits
    (for/list ([target (in-list targets)])
      (if (module-typed? target) "1" "0")))
  (format "~a_~a" benchmark (string-join bits "")))

(define benchmark-name
  (path->string
   (last (explode-path (simplify-path (build-path main-dir ".."))))))
(define config-dir (targets->name targets benchmark-name))
(define gtp-dir (writable-data-dir #:program "gtp-measure"))
(define dir (build-path gtp-dir "configurations" config-dir))
(make-directory* dir)
(for ([target (in-list targets)])
  (copy-file target (build-path dir (file-name-from-path target)) #t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define initial-times
    (cons (current-process-milliseconds) (current-inexact-milliseconds)))
(define buf (box '()))
(define reciever (make-log-receiver (current-logger) 'debug))
(define (handler)
  (letrec-values
      ([(L) (λ ()
              (define v (sync reciever))
              (if (eq? 'gc-info (prefab-struct-key (vector-ref v 2)))
                  (set-box! buf (cons v (unbox buf)))
                  (void))
              (L))])
    (L)))
(thread handler)

(define (get-out)
  (with-handlers ([exn:fail? (λ (x) (hash 'error (exn->string x)))])
    (optimize targets #:show-blames #t #:ignore-fakes #t)))

(define-values (out* _ total-time __)
  (time-apply get-out '()))

(define out (car out*))
(hash-set! out 'total total-time)

(define gc-string (open-output-string))
(parameterize ([current-output-port gc-string])
  (continue buf initial-times
            (cons (current-process-milliseconds) (current-inexact-milliseconds))))
(hash-set! out 'gc (get-output-string gc-string))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-values (tcp-in tcp-out)
  (tcp-connect "localhost" port))

(write out tcp-out)
(close-input-port tcp-in)
(close-output-port tcp-out)
