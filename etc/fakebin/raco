#!/usr/bin/env racket
#lang racket/base

(require racket/path
         racket/port
         racket/exn
         racket/function
         racket/string
         racket/tcp
         scv-gt)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define port 8182)
(define main
  (vector-ref (current-command-line-arguments) 0))
(define main-dir
  (path-only (path->complete-path (string->path main))))
(define rkt? (curryr path-has-extension? #".rkt"))
(define targets
  (filter rkt? (directory-list main-dir #:build? main-dir)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define out-port (open-output-string))
(define out
  (with-handlers ([exn:fail? (Î» (x) (list 'error (exn->string x)))])
    (parameterize ([current-output-port out-port])
      (optimize targets #:show-blames #t))
    (define input-port (open-input-string (get-output-string out-port)))
    (read input-port)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-values (tcp-in tcp-out)
  (tcp-connect "localhost" port))
(write out tcp-out)
(close-input-port tcp-in)
(close-output-port tcp-out)
(when (and (pair? out) (equal? 'error (car out)))
  (raise-user-error ""))
