#lang typed/racket/no-check
(require racket/contract
          (lib "racket/contract/base.rkt")
          (lib "racket/contract.rkt")
          (lib "racket/base.rkt"))
(define g9 (lambda (x) (foo? x)))
(define g10 #t)
(define g11 #t)
(define g12 any/c)
(define g13 '#t)
(define g14 '#f)
(define g15 (or/c g13 g14))
(define g16 (-> g12 (values g15)))
(define g17 (or/c g11 g16))
(define generated-contract5 g10)
(define generated-contract6 g17)
(define generated-contract8 (-> (values g9)))
(provide (contract-out (struct foo ())))
(module require/contracts racket/base
   (require racket/contract)
   (provide (contract-out)))
(require (prefix-in -: (only-in 'require/contracts))
          (except-in 'require/contracts))
(define-values () (values))
(struct: foo ())
(provide)
