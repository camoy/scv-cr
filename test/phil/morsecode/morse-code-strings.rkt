#lang typed/racket/base/no-check
(require racket/contract (lib "racket/base.rkt") (lib "racket/contract.rkt"))
(define g10 string?)
(define generated-contract5 (-> g10 (values g10)))
(provide (contract-out (string->morse generated-contract5)))
(module require/contracts racket/base
   (require racket/contract
            "morse-code-table.rkt"
            (lib "racket/contract/base.rkt")
            (lib "typed-racket/utils/hash-contract.rkt")
            (lib "racket/base.rkt"))
   (define g6 char?)
   (define g7 string?)
   (define g8 (typed-racket-hash/c g6 g7))
   (define g9 (or/c g8))
   (define lifted/1 g9)
   (provide (contract-out (char-table lifted/1))))
(require (prefix-in -: (only-in 'require/contracts char-table))
          (except-in 'require/contracts char-table))
(define g6 char?)
(define g7 string?)
(define g8 (typed-racket-hash/c g6 g7))
(define g9 (or/c g8))
(define lifted/1 g9)
(define-values (char-table) (values -:char-table))
(provide)
(require require-typed-check)
(void)
(: char->dit-dah-string (-> Char String))
(define (char->dit-dah-string letter)
   (define res (hash-ref char-table (char-downcase letter) #f))
   (if (eq? #f res)
     (raise-argument-error 'letter-map "character in map" 0 letter)
     res))
(: string->morse (-> String String))
(define (string->morse str)
   (define morse-list
     (for/list : (Listof String) ((c : Char str)) (char->dit-dah-string c)))
   (apply string-append morse-list))
