#lang typed/racket/base/no-check
(require racket/contract)
(provide (contract-out))
(module require/contracts racket/base
   (require racket/contract
            "levenshtein.rkt"
            "morse-code-strings.rkt"
            (lib "racket/contract/base.rkt")
            (lib "racket/base.rkt")
            (lib "racket/contract.rkt"))
   (define g7 string?)
   (define g8 (-> any/c g7))
   (define g9 exact-integer?)
   (define g10 (or/c g9))
   (define g11 '())
   (define g12 (cons/c g10 g11))
   (define g13 (cons/c g7 g12))
   (define g14 (listof g13))
   (define lifted/1 g8)
   (define lifted/3 (-> g7 g7 (values g10)))
   (define lifted/5 g14)
   (provide (contract-out
             (string->morse lifted/1)
             (string-levenshtein lifted/3))))
(require (prefix-in
           -:
           (only-in 'require/contracts string-levenshtein string->morse))
          (except-in 'require/contracts string-levenshtein string->morse))
(define g7 string?)
(define g8 (-> any/c g7))
(define g9 exact-integer?)
(define g10 (or/c g9))
(define g11 '())
(define g12 (cons/c g10 g11))
(define g13 (cons/c g7 g12))
(define g14 (listof g13))
(define lifted/1 g8)
(define lifted/3 (-> g7 g7 (values g10)))
(define lifted/5 g14)
(define-values
  (string-levenshtein string->morse)
  (values -:string-levenshtein -:string->morse))
(require require-typed-check (only-in racket/file file->value))
(void)
(void)
(define word-frequency-list "./../base/frequency.rktd")
(define word-frequency-list-small "./../base/frequency-small.rktd")
(define freq-list? lifted/5)
(: file->words (-> String (Listof String)))
(define (file->words filename)
   (define words+freqs (file->value (string->path filename)))
   (unless (freq-list? words+freqs) (error "expected a frequency list"))
   (for/list
    :
    (Listof String)
    ((word+freq : (List String Integer) words+freqs))
    (car word+freq)))
(: allwords (Listof String))
(define allwords (file->words word-frequency-list))
(: words-small (Listof String))
(define words-small (file->words word-frequency-list-small))
(: main (-> (Listof String) Void))
(define (main words)
   (for*
    ((w1 (in-list words)) (w2 (in-list words)))
    (string->morse w1)
    (string->morse w2)
    (string-levenshtein w1 w2)
    (string-levenshtein w2 w1)
    (void)))
(time (main words-small))
