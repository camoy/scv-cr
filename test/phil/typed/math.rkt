#lang typed/racket/base/no-check
(require racket/contract
          (lib "racket/contract.rkt")
          (lib "racket/base.rkt")
          (lib "racket/contract/base.rkt"))
(define g8 real?)
(define g9 (or/c g8))
(define generated-contract3 (-> g9 (values g9)))
(define generated-contract4 (-> g9 g9 (values g9)))
(define generated-contract5 (-> g9 g9 (values g9)))
(define generated-contract6 (-> g9 (values g9)))
(define generated-contract7 (-> g9 (values g9)))
(provide (contract-out
           (sqr generated-contract7)
           (abs generated-contract3)
           (max generated-contract4)
           (min generated-contract5)
           (msqrt generated-contract6)))
(module require/contracts racket/base
   (require racket/contract)
   (provide (contract-out)))
(require (prefix-in -: (only-in 'require/contracts))
          (except-in 'require/contracts))
(define-values () (values))
(provide sqrt)
(: min (-> Real Real Real))
(define (min x y) (if (<= x y) x y))
(: max (-> Real Real Real))
(define (max x y) (if (>= x y) x y))
(: abs (-> Real Real))
(define (abs x) (if (>= x 0) x (- 0 x)))
(: sqr (-> Real Real))
(define (sqr x) (* x x))
(: msqrt (-> Real Real))
(define (msqrt x) (assert (sqrt x) real?))
