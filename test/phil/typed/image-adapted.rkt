#lang typed/racket/base/no-check
(require racket/contract)
(provide (contract-out))
(module require/contracts racket/base
   (require racket/contract
            "image.rkt"
            (lib "racket/contract.rkt")
            (lib "racket/base.rkt")
            (lib "racket/contract/base.rkt"))
   (define g12 any/c)
   (define g13 (lambda (x) (image? x)))
   (define g14 any/c)
   (define g15 (-> any/c g14))
   (define g16 real?)
   (define g17 (or/c g16))
   (define g18 string?)
   (define lifted/33 (-> g12 (values g13)))
   (define lifted/35 g15)
   (define lifted/37 (-> g17 g17 (values g13)))
   (define lifted/39 (-> g13 g17 g17 g13 (values g13)))
   (define lifted/41 (-> g17 g18 g18 (values g13)))
   (provide (contract-out
             (empty-scene lifted/37)
             (place-image lifted/39)
             (circle lifted/41)
             (struct image ((impl g12))))))
(require (prefix-in
           -:
           (only-in 'require/contracts circle place-image empty-scene image?))
          (except-in 'require/contracts circle place-image empty-scene image?))
(define g12 any/c)
(define g13 (lambda (x) (image? x)))
(define g14 any/c)
(define g15 (-> any/c g14))
(define g16 real?)
(define g17 (or/c g16))
(define g18 string?)
(define lifted/33 (-> g12 (values g13)))
(define lifted/35 g15)
(define lifted/37 (-> g17 g17 (values g13)))
(define lifted/39 (-> g13 g17 g17 g13 (values g13)))
(define lifted/41 (-> g17 g18 g18 (values g13)))
(define-values
  (circle place-image empty-scene image?)
  (values -:circle -:place-image -:empty-scene -:image?))
(require require-typed-check)
(void)
(define-type Image image)
(provide Image empty-scene place-image circle)
