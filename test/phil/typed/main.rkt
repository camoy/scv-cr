#lang typed/racket/base/no-check
(require racket/contract)
(provide (contract-out))
(module require/contracts racket/base
   (require racket/contract
            "zombie.rkt"
            (lib "racket/base.rkt")
            (lib "racket/contract/base.rkt")
            (lib "racket/contract.rkt")
            (submod "image-adapted.rkt" #%type-decl ".."))
   (define g8 (recursive-contract g33 #:chaperone))
   (define g9 (recursive-contract g44 #:chaperone))
   (define g10 (recursive-contract g51 #:chaperone))
   (define g11 symbol?)
   (define g12 'stop-when)
   (define g13 '#t)
   (define g14 '#f)
   (define g15 (or/c g13 g14))
   (define g16 (-> (values g15)))
   (define g17 (cons/c g12 g16))
   (define g18 'to-draw)
   (define g19 (lambda (x) (image? x)))
   (define g20 (-> g19))
   (define g21 (cons/c g18 g20))
   (define g22 'on-tick)
   (define g23 g10)
   (define g24 (-> (values g23)))
   (define g25 (cons/c g22 g24))
   (define g26 'on-mouse)
   (define g27 real?)
   (define g28 (or/c g27))
   (define g29 string?)
   (define g30 (-> g28 g28 g29 (values g23)))
   (define g31 (cons/c g26 g30))
   (define g32 (or/c g17 g21 g25 g31))
   (define g33 (-> g11 (values g32)))
   (define g34 (-> (values g15)))
   (define g35 (cons/c g12 g34))
   (define g36 (-> (values g19)))
   (define g37 (cons/c g18 g36))
   (define g38 g9)
   (define g39 (-> (values g38)))
   (define g40 (cons/c g22 g39))
   (define g41 (-> g28 g28 g29 (values g38)))
   (define g42 (cons/c g26 g41))
   (define g43 (or/c g35 g37 g40 g42))
   (define g44 (-> g11 (values g43)))
   (define g45 g8)
   (define g46 (-> (values g45)))
   (define g47 (cons/c g22 g46))
   (define g48 (-> g28 g28 g29 (values g45)))
   (define g49 (cons/c g26 g48))
   (define g50 (or/c g35 g37 g47 g49))
   (define g51 (-> g11 (values g50)))
   (define g52 '())
   (define g53 (cons/c g29 g52))
   (define g54 (cons/c g28 g53))
   (define g55 (cons/c g28 g54))
   (define g56 any/c)
   (define g57 (listof g56))
   (define lifted/1 g10)
   (define lifted/3 (-> g38 (values g30)))
   (define lifted/5 (-> g38 (values g24)))
   (define lifted/16 g55)
   (define lifted/17 g57)
   (provide (contract-out
             (world-on-tick lifted/5)
             (w0 lifted/1)
             (world-on-mouse lifted/3))))
(require (prefix-in
           -:
           (only-in 'require/contracts world-on-mouse w0 world-on-tick))
          (except-in 'require/contracts world-on-mouse w0 world-on-tick))
(define g8 (recursive-contract g33 #:chaperone))
(define g9 (recursive-contract g44 #:chaperone))
(define g10 (recursive-contract g51 #:chaperone))
(define g11 symbol?)
(define g12 'stop-when)
(define g13 '#t)
(define g14 '#f)
(define g15 (or/c g13 g14))
(define g16 (-> (values g15)))
(define g17 (cons/c g12 g16))
(define g18 'to-draw)
(define g19 (lambda (x) (image? x)))
(define g20 (-> g19))
(define g21 (cons/c g18 g20))
(define g22 'on-tick)
(define g23 g10)
(define g24 (-> (values g23)))
(define g25 (cons/c g22 g24))
(define g26 'on-mouse)
(define g27 real?)
(define g28 (or/c g27))
(define g29 string?)
(define g30 (-> g28 g28 g29 (values g23)))
(define g31 (cons/c g26 g30))
(define g32 (or/c g17 g21 g25 g31))
(define g33 (-> g11 (values g32)))
(define g34 (-> (values g15)))
(define g35 (cons/c g12 g34))
(define g36 (-> (values g19)))
(define g37 (cons/c g18 g36))
(define g38 g9)
(define g39 (-> (values g38)))
(define g40 (cons/c g22 g39))
(define g41 (-> g28 g28 g29 (values g38)))
(define g42 (cons/c g26 g41))
(define g43 (or/c g35 g37 g40 g42))
(define g44 (-> g11 (values g43)))
(define g45 g8)
(define g46 (-> (values g45)))
(define g47 (cons/c g22 g46))
(define g48 (-> g28 g28 g29 (values g45)))
(define g49 (cons/c g26 g48))
(define g50 (or/c g35 g37 g47 g49))
(define g51 (-> g11 (values g50)))
(define g52 '())
(define g53 (cons/c g29 g52))
(define g54 (cons/c g28 g53))
(define g55 (cons/c g28 g54))
(define g56 any/c)
(define g57 (listof g56))
(define lifted/1 g10)
(define lifted/3 (-> g38 (values g30)))
(define lifted/5 (-> g38 (values g24)))
(define lifted/16 g55)
(define lifted/17 g57)
(define-values
  (world-on-mouse w0 world-on-tick)
  (values -:world-on-mouse -:w0 -:world-on-tick))
(require require-typed-check "image-adapted.rkt")
(void)
(define-type
  World
  (->
   Symbol
   (U
    (Pairof 'on-mouse (-> Real Real String World))
    (Pairof 'on-tick (-> World))
    (Pairof 'to-draw (-> Image))
    (Pairof 'stop-when (-> Boolean)))))
(: replay (-> World (Listof Any) Void))
(define (replay w0 hist)
   (let loop ((w : World w0) (h : (Listof Any) hist))
     (cond
      ((null? h) (void))
      ((not (list? (car h))) (error "input error"))
      (else
       (define m (caar h))
       (define as (cdar h))
       (case m
         ((on-mouse)
          (define r
            (apply (world-on-mouse w) (cast as (List Real Real String))))
          (loop r (cdr h)))
         ((on-tick) (define r ((world-on-tick w))) (loop r (cdr h))))))))
(define TEST (with-input-from-file "../base/zombie-hist.rktd" read))
(: main (-> Any Void))
(define (main hist)
   (cond
    ((list? hist) (for ((i : Integer (in-range 1))) (replay w0 hist)))
    (else (error "bad input"))))
(time (main TEST))
